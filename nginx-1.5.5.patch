diff -r a720f0b0e083 src/event/ngx_event_openssl.c
--- a/src/event/ngx_event_openssl.c	Fri Sep 27 19:39:33 2013 +0400
+++ b/src/event/ngx_event_openssl.c	Mon Sep 30 20:18:05 2013 +0400
@@ -38,6 +38,12 @@
 static void ngx_ssl_session_rbtree_insert_value(ngx_rbtree_node_t *temp,
     ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel);
 
+#ifdef TLSEXT_TYPE_session_ticket
+static int ngx_ssl_session_ticket_key_callback(ngx_ssl_conn_t *ssl_conn,
+    u_char *key_name, u_char *iv, EVP_CIPHER_CTX *cipher_ctx,
+    HMAC_CTX *hmac_ctx, int init);
+#endif
+
 static void *ngx_openssl_create_conf(ngx_cycle_t *cycle);
 static char *ngx_openssl_engine(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
 static void ngx_openssl_exit(ngx_cycle_t *cycle);
@@ -82,6 +88,7 @@
 int  ngx_ssl_connection_index;
 int  ngx_ssl_server_conf_index;
 int  ngx_ssl_session_cache_index;
+int  ngx_ssl_session_ticket_keys_index;
 int  ngx_ssl_certificate_index;
 int  ngx_ssl_stapling_index;
 
@@ -139,6 +146,14 @@
         return NGX_ERROR;
     }
 
+    ngx_ssl_session_ticket_keys_index = SSL_CTX_get_ex_new_index(0, NULL, NULL,
+                                                                 NULL, NULL);
+    if (ngx_ssl_session_ticket_keys_index == -1) {
+        ngx_ssl_error(NGX_LOG_ALERT, log, 0,
+                      "SSL_CTX_get_ex_new_index() failed");
+        return NGX_ERROR;
+    }
+
     ngx_ssl_certificate_index = SSL_CTX_get_ex_new_index(0, NULL, NULL, NULL,
                                                          NULL);
     if (ngx_ssl_certificate_index == -1) {
@@ -2299,6 +2314,170 @@
 }
 
 
+#ifdef TLSEXT_TYPE_session_ticket
+static int
+ngx_ssl_session_ticket_key_callback(ngx_ssl_conn_t *ssl_conn, u_char *key_name,
+    u_char *iv, EVP_CIPHER_CTX *cipher_ctx, HMAC_CTX *hmac_ctx, int init)
+{
+    SSL_CTX                        *ssl_ctx;
+    ngx_array_t                    *ticket_keys;
+    ngx_ssl_sess_ticket_key_t      *ticket_keys_data;
+    ngx_uint_t                      i;
+
+    ssl_ctx = SSL_get_SSL_CTX(ssl_conn);
+    ticket_keys = SSL_CTX_get_ex_data(ssl_ctx,
+                                      ngx_ssl_session_ticket_keys_index);
+
+    if (ticket_keys == NULL || ticket_keys->nelts == 0) {
+        return -1;
+    }
+
+    ticket_keys_data = ticket_keys->elts;
+
+    if (init == 1) {
+        RAND_pseudo_bytes(iv, EVP_MAX_IV_LENGTH);
+
+        ngx_memcpy(key_name, ticket_keys_data[0].key_name, 16);
+
+        HMAC_Init_ex(hmac_ctx, ticket_keys_data[0].hmac_key, 16,
+                     tlsext_tick_md(), NULL);
+
+        EVP_EncryptInit_ex(cipher_ctx, EVP_aes_128_cbc(), NULL,
+                           ticket_keys_data[0].aes_key, iv);
+
+        return 0;
+    }
+
+    for (i = 0; i < ticket_keys->nelts; i++) {
+        if (ngx_memcmp(ticket_keys_data[i].key_name, key_name, 16) == 0) {
+            HMAC_Init_ex(hmac_ctx, ticket_keys_data[i].hmac_key, 16,
+                         tlsext_tick_md(), NULL);
+            EVP_DecryptInit_ex(cipher_ctx, EVP_aes_128_cbc(), NULL,
+                               ticket_keys_data[i].aes_key, iv);
+
+            if (i > 0) {
+                /*
+                 * key found, but it's not default one,
+                 * reissue with default key
+                 */
+                return 2;
+            }
+
+            return 1;
+        }
+    }
+
+    /* key not found */
+    return 0;
+}
+
+ngx_int_t
+ngx_ssl_session_ticket_key(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *keyfile)
+{
+    BIO                            *bio;
+    ngx_array_t                    *ticket_keys;
+    ngx_ssl_sess_ticket_key_t      *ticket_key;
+    char                           *name = 0;
+    char                           *header = 0;
+    u_char                         *data = 0;
+    long                            len = 0;
+    ngx_uint_t                      idx = 0;
+    u_long                          n;
+
+    if (keyfile->len == 0) {
+        return NGX_OK;
+    }
+
+    ticket_keys = ngx_array_create(cf->pool, 2,
+                                   sizeof(ngx_ssl_sess_ticket_key_t));
+    if (ticket_keys == NULL) {
+        return NGX_ERROR;
+    }
+
+    if (ngx_conf_full_name(cf->cycle, keyfile, 1) != NGX_OK) {
+        return NGX_ERROR;
+    }
+
+    bio = BIO_new_file((char *) keyfile->data, "r");
+    if (bio == NULL) {
+        ngx_ssl_error(NGX_LOG_ALERT, ssl->log, 0,
+                      "BIO_new_file(\"%s\") failed, random will be used", keyfile->data);
+        return NGX_ERROR;
+    }
+
+    for ( ;; ) {
+        if (PEM_read_bio(bio, &name, &header, &data, &len) != 0) {
+            if (ngx_memcmp(name, "SESSION TICKET KEY", 18) != 0) {
+                continue;
+            }
+
+            if (len != TLSEXT_TICKET_KEYLEN) {
+                ngx_log_error(NGX_LOG_ALERT, cf->log, 0,
+                              "\"%s\" has invalid ticket key at pos %d (wrong len)",
+                              keyfile->data, idx);
+                continue;
+            }
+
+            ticket_key = ngx_array_push(ticket_keys);
+            if (ticket_key == NULL) {
+                goto failed;
+            }
+
+            ngx_memcpy(ticket_key->key_name, data, 16);
+            ngx_memcpy(ticket_key->hmac_key, data + 16, 16);
+            ngx_memcpy(ticket_key->aes_key, data + 32, 16);
+
+            idx += 1;
+        } else {
+            n = ERR_peek_last_error();
+
+            if (ERR_GET_LIB(n) == ERR_LIB_PEM
+                && ERR_GET_REASON(n) == PEM_R_NO_START_LINE)
+            {
+                /* end of file */
+                ERR_clear_error();
+                break;
+            }
+        }
+    }
+
+    if (ticket_keys->nelts == 0) {
+        ngx_log_error(NGX_LOG_ALERT, cf->log, 0,
+                      "\"%s\" has no valid ticket keys, random will be used", keyfile->data);
+        goto failed;
+    }
+
+    if (SSL_CTX_set_tlsext_ticket_key_cb(ssl->ctx,
+                                         ngx_ssl_session_ticket_key_callback)
+        == 0)
+    {
+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
+                      "SSL_CTX_set_tlsext_ticket_key_cb() failed");
+        goto failed;
+    }
+
+    if (SSL_CTX_set_ex_data(ssl->ctx, ngx_ssl_session_ticket_keys_index,
+                            ticket_keys)
+        == 0)
+    {
+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
+                      "SSL_CTX_set_ex_data() failed");
+        goto failed;
+    }
+
+    BIO_free(bio);
+
+    return NGX_OK;
+
+failed:
+
+    BIO_free(bio);
+
+    return NGX_ERROR;
+}
+#endif
+
+
 ngx_int_t
 ngx_ssl_get_raw_certificate(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
 {
diff -r a720f0b0e083 src/event/ngx_event_openssl.h
--- a/src/event/ngx_event_openssl.h	Fri Sep 27 19:39:33 2013 +0400
+++ b/src/event/ngx_event_openssl.h	Mon Sep 30 20:18:05 2013 +0400
@@ -83,6 +83,25 @@
 } ngx_ssl_session_cache_t;
 
 
+#ifdef TLSEXT_TYPE_session_ticket
+typedef struct  {
+    u_char                        key_name[16];
+    u_char                        hmac_key[16];
+    u_char                        aes_key[16];
+} ngx_ssl_sess_ticket_key_t;
+
+#ifndef tlsext_tick_md
+#ifdef OPENSSL_NO_SHA256
+#define tlsext_tick_md EVP_sha1
+#else
+#define tlsext_tick_md EVP_sha256
+#endif
+#endif
+
+/* 48 bytes: 16 for keyname, 16 for HMAC secret, 16 for AES private key */
+#define TLSEXT_TICKET_KEYLEN (48)
+#endif
+
 
 #define NGX_SSL_SSLv2    0x0002
 #define NGX_SSL_SSLv3    0x0004
@@ -122,6 +141,12 @@
 
 void ngx_ssl_remove_cached_session(SSL_CTX *ssl, ngx_ssl_session_t *sess);
 ngx_int_t ngx_ssl_set_session(ngx_connection_t *c, ngx_ssl_session_t *session);
+
+#ifdef TLSEXT_TYPE_session_ticket
+ngx_int_t ngx_ssl_session_ticket_key(ngx_conf_t *cf, ngx_ssl_t *ssl,
+    ngx_str_t *keyfile);
+#endif
+
 #define ngx_ssl_get_session(c)      SSL_get1_session(c->ssl->connection)
 #define ngx_ssl_free_session        SSL_SESSION_free
 #define ngx_ssl_get_connection(ssl_conn)                                      \
diff -r a720f0b0e083 src/http/modules/ngx_http_ssl_module.c
--- a/src/http/modules/ngx_http_ssl_module.c	Fri Sep 27 19:39:33 2013 +0400
+++ b/src/http/modules/ngx_http_ssl_module.c	Mon Sep 30 20:18:05 2013 +0400
@@ -160,6 +160,15 @@
       offsetof(ngx_http_ssl_srv_conf_t, session_timeout),
       NULL },
 
+#ifdef TLSEXT_TYPE_session_ticket
+    { ngx_string("ssl_session_ticket_key"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE1,
+      ngx_conf_set_str_slot,
+      NGX_HTTP_SRV_CONF_OFFSET,
+      offsetof(ngx_http_ssl_srv_conf_t, session_ticket_keyfile),
+      NULL },
+#endif
+
     { ngx_string("ssl_crl"),
       NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_CONF_TAKE1,
       ngx_conf_set_str_slot,
@@ -413,6 +422,7 @@
      *     sscf->shm_zone = NULL;
      *     sscf->stapling_file = { 0, NULL };
      *     sscf->stapling_responder = { 0, NULL };
+     *     sscf->session_ticket_keyfile = { 0, NULL };
      */
 
     sscf->enable = NGX_CONF_UNSET;
@@ -469,6 +479,12 @@
                          "");
     ngx_conf_merge_str_value(conf->trusted_certificate,
                          prev->trusted_certificate, "");
+
+#ifdef TLSEXT_TYPE_session_ticket
+    ngx_conf_merge_str_value(conf->session_ticket_keyfile,
+                        prev->session_ticket_keyfile, "");
+#endif
+
     ngx_conf_merge_str_value(conf->crl, prev->crl, "");
 
     ngx_conf_merge_str_value(conf->ecdh_curve, prev->ecdh_curve,
@@ -623,6 +639,10 @@
         return NGX_CONF_ERROR;
     }
 
+#ifdef TLSEXT_TYPE_session_ticket
+    ngx_ssl_session_ticket_key(cf, &conf->ssl, &conf->session_ticket_keyfile);
+#endif
+
     if (conf->stapling) {
 
         if (ngx_ssl_stapling(cf, &conf->ssl, &conf->stapling_file,
diff -r a720f0b0e083 src/http/modules/ngx_http_ssl_module.h
--- a/src/http/modules/ngx_http_ssl_module.h	Fri Sep 27 19:39:33 2013 +0400
+++ b/src/http/modules/ngx_http_ssl_module.h	Mon Sep 30 20:18:05 2013 +0400
@@ -30,6 +30,10 @@
 
     time_t                          session_timeout;
 
+#ifdef TLSEXT_TYPE_session_ticket
+    ngx_str_t                       session_ticket_keyfile;
+#endif
+
     ngx_str_t                       certificate;
     ngx_str_t                       certificate_key;
     ngx_str_t                       dhparam;
